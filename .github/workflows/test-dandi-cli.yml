name: Test against dandi-cli

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 6 * * *'

jobs:
  test-dandi-cli:
    runs-on: ${{ matrix.os }}
    env:
      NO_ET: 1
      DANDI_ALLOW_LOCALHOST_URLS: 1
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-latest
          - macos-latest
        python:
          # Use the only Python which is ATM also used by dandi-api
          # - 3.7
          - 3.8
          # - 3.9
          # - '3.10'
        version:
          - master
          - release
        mode:
          - normal
        include:
          - os: ubuntu-latest
            python: 3.8
            mode: dandi-devel
            version: master
          - os: ubuntu-latest
            python: 3.8
            mode: dandi-devel
            version: release
    steps:
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Update pip & install wheel
        run: python -m pip install --upgrade pip wheel

      - name: Install hdf5 (Ubuntu)
        if: matrix.python == '3.10' && startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libhdf5-dev

      - name: Install hdf5 (macOS)
        if: matrix.python == '3.10' && startsWith(matrix.os, 'macos')
        run: |
          brew install hdf5@1.8
          brew link hdf5@1.8

      - name: Install master branch of dandi
        if: ${{ matrix.version == 'master' }}
        run: pip install "dandi[test] @ git+https://github.com/dandi/dandi-cli.git"

      - name: Install latest release of dandi
        if: ${{ matrix.version == 'release' }}
        run: pip install "dandi[test]"

      - name: Set DANDI_DEVEL=1
        if: matrix.mode == 'dandi-devel'
        run: echo DANDI_DEVEL=1 >> "$GITHUB_ENV"

      - name: Check out dandischema
        uses: actions/checkout@v3
        with:
          # Fetch all commits so that versioningit will return something
          # compatible with semantic-version
          fetch-depth: 0
          path: dandischema

      - name: Install dandischema
        run: pip install .
        working-directory: dandischema

      - name: Build dandi-api image with this version of dandischema
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          docker build \
            -t dandiarchive/dandiarchive-api \
            -f tools/api-with-schema.Dockerfile \
            .
        working-directory: dandischema

      - name: Run dandi-cli tests
        run: python -m pytest -s -v --pyargs dandi
